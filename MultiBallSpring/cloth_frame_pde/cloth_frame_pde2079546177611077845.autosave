int threadCount = 15;
int springPerThread = 15;
Ball[] balls = new Ball[threadCount * springPerThread];
ArrayList<Spring> springs = new ArrayList<Spring>();
PImage graf ;
void setup(){
  size(1000, 1000, P3D);
  generateBalls();
  camera = new Camera();
  graf = loadImage("graffiti.jpg") ;
}

void generateBalls() {
  for(int i=0; i<balls.length; i++) {
    PVector pos = new PVector(100 + (i/springPerThread)* 100, -10 + (i%springPerThread)*restLen, 0) ;
    PVector vel = new PVector(0, 0, 0) ;
    PVector acc = new PVector(0 , 0, 0) ;
    float mass = 1;
    balls[i] = new Ball(pos, vel, acc, mass);
  }
  
  for(int i=0; i<balls.length-1; i++) {
    if (i % springPerThread != springPerThread-1) {
      springs.add(new Spring(balls[i], balls[i+1]));
    }
    int hoz = i + springPerThread ;
    if(hoz < balls.length){
      springs.add(new Spring(balls[i], balls[i+springPerThread]));
    }
  }
  
}

float roof = 0 ;
float floor = 10000 ;
float restLen = 50 ;
float k = 300;
float kv = 500;
float radius = 10 ;
PVector gravity = new PVector(0, 5, 0) ;
PVector stringStart = new PVector(200, 200) ;


void update(float dt){      
  for (int i = 0 ; i < balls.length;i++) {
    if(i != 0 && i != balls.length - springPerThread ){
      PVector dv = PVector.mult(PVector.add(gravity, balls[i].acc), dt) ; 
      balls[i].vel.add(dv) ;
      //midpointVelocity(balls[i], dt);
      balls[i].pos.add(PVector.mult(balls[i].vel, dt)) ;  
    }
    if(balls[i].pos.y + radius > floor) {
        balls[i].pos.y = floor - radius;
        balls[i].vel.y = 0 ;
    }
    balls[i].acc = new PVector(0,0);  // Zero out vectors 
  }
  
  // Get acceleration for next time step
  for(int i=0; i<springs.size(); i++) {
    calculateAccleration(springs.get(i).bottom, springs.get(i).top);
  }
}

// put in update to use midpoint updating
void midpointVelocity(Ball ball, float dt) {
  ball.vel.add(PVector.mult(ball.acc, dt/2));
}

void calculateAccleration(Ball ball2, Ball ball1) {
  PVector stringVector = PVector.sub(ball2.pos, ball1.pos) ;
  float stringLen = stringVector.mag() ;
  float currLen = stringLen - restLen ;
  
  stringVector.normalize() ;
  PVector stringVectorUnit = stringVector;
  
  float dampenForce = -kv* (ball2.vel.dot(stringVectorUnit) - ball1.vel.dot(stringVectorUnit));
  PVector dampForceVector  = PVector.mult(stringVectorUnit, dampenForce);
  PVector stringForce1 = stringVectorUnit.mult(-k*currLen) ;
  stringForce1.div(2*ball2.mass) ;
  dampForceVector.div(2*ball2.mass) ;
  ball2.acc.add(PVector.add(stringForce1, dampForceVector)) ;
  
  ball1.acc.sub(PVector.add(stringForce1, dampForceVector)) ;
}

class Ball {
  PVector pos;
  PVector vel;
  PVector acc;
  float mass;
  
  Ball (PVector pos, PVector vel, PVector acc, float mass) {
    this.pos = pos;
    this.vel = vel;
    this.acc = acc;
    this.mass = mass;
  } 
}

class Spring {
  Ball top;
  Ball bottom;
  
  Spring (Ball top, Ball bottom) {
    this.top = top;
    this.bottom = bottom;
  } 
} 

void draw(){
  background(0, 0, 0) ;
  //line(0, floor, 1000, floor);
  for(int i = 0 ;i < 100; i++){
    update(0.1/frameRate) ;
  }
  camera.Update(0.9/frameRate) ;
  fill(255, 255, 255) ;
  
  noStroke() ;
  noFill() ;
  textureMode(NORMAL);
  for(int i = 0 ; i < springPerThread - 1; i++){
    beginShape(TRIANGLE_STRIP);
    texture(graf) ;
    for(int j = 0 ; j < threadCount; j++){
      float u = map(j, 0, threadCount, 0, 1) ;
      float v1 = map(i, 0, springPerThread, 0, 1) ;
      float v2 = map(i+1, 0, springPerThread, 0, 1) ;
      vertex(balls[i + j*springPerThread].pos.x, balls[i + j*springPerThread].pos.y, balls[i + j*springPerThread].pos.z, u, v1) ;
      vertex(balls[i+1 + j*springPerThread].pos.x, balls[i+1 + j*springPerThread].pos.y, balls[i+1 + j*springPerThread].pos.z, u, v2) ;
    }
    endShape() ;
  }
  // drawing the cloth with lines
  //for(int i=0; i<balls.length; i++) {
  //  stroke(255) ;
  //  point(balls[i].pos.x, balls[i].pos.y, balls[i].pos.z) ;
  //  if (i % springPerThread != 0) {
  //    //pushMatrix() ;
  //    stroke(255) ;
  //    line(balls[i-1].pos.x, balls[i-1].pos.y, balls[i-1].pos.z, balls[i].pos.x, balls[i].pos.y, balls[i].pos.z) ;
  //    point(balls[i-1].pos.x, balls[i-1].pos.y, balls[i-1].pos.z);
  //    //circle(balls[i].pos.x, balls[i].pos.y, radius) ;
  //    //popMatrix() ;
  //  }
  //  else{
  //    //pushMatrix() ;
  //    fill(255);
  //    //circle(balls[i].pos.x, balls[i].pos.y, radius) ;
  //    //popMatrix() ;
  //  }
  //  int hoz = i + springPerThread ;
  //  if(hoz < balls.length){
  //    stroke(255);
  //    line(balls[i].pos.x, balls[i].pos.y, balls[i].pos.z, balls[i+springPerThread].pos.x, balls[i+springPerThread].pos.y, balls[i+springPerThread].pos.z) ;
  //    //point(balls[i].pos.x, balls[i].pos.y, balls[i].pos.z) ;
  //    //point(balls[i+springPerThread].pos.x, balls[i+springPerThread].pos.y, balls[i+springPerThread].pos.z) ;
  //  }
  //}
  surface.setTitle("Spring System   FPS" + "  -  " +str(round(frameRate)));
}

void keyPressed()
{
  camera.HandleKeyPressed();
}

void keyReleased()
{
  camera.HandleKeyReleased();
}
